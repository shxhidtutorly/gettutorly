rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user owns the file
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Profile pictures - users can only upload/access their own
    match /profile-pictures/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Study materials - users can only access their own files
    match /study-materials/{userId}/{allPaths=**} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Audio files - users can only access their own
    match /audio-notes/{userId}/{allPaths=**} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Document uploads - users can only access their own
    match /documents/{userId}/{allPaths=**} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Public assets - readable by all authenticated users, writable by admins only
    match /public/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Admin uploads - only admins can access
    match /admin/{allPaths=**} {
      allow read, write: if isAdmin();
    }
    
    // Default rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 