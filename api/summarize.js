// api/summarize.js
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('Content-Type', 'application/json');

  // Handle preflight request
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Log incoming request
  console.log(`🔍 API Request: ${req.method} to /api/summarize`);

  // Only allow POST requests
  if (req.method !== 'POST') {
    console.log(`❌ Method ${req.method} not allowed`);
    return res.status(405).json({ 
      error: 'Method not allowed',
      allowed: ['POST'],
      received: req.method
    });
  }

  try {
    const { text } = req.body;

    // Validate input
    if (!text || typeof text !== 'string' || text.trim().length === 0) {
      console.log(`❌ Invalid text input`);
      return res.status(400).json({ 
        error: 'Text is required and must be a non-empty string'
      });
    }

    // Try multiple possible environment variable names
    const apiKey = process.env.OPENROUTER_KEY || 
                   process.env.OPENROUTER_API_KEY || 
                   process.env.VITE_OPENROUTER_KEY ||
                   process.env.VITE_OPENROUTER_API_KEY;

    console.log("=== SERVER-SIDE ENV DEBUG ===");
    const availableKeys = Object.keys(process.env).filter(key => 
      key.includes('OPENROUTER') || key.includes('API') || key.includes('OPEN')
    );
    console.log("Available env vars:", availableKeys);
    console.log("API Key found:", !!apiKey);
    console.log("API Key length:", apiKey?.length || 0);

    if (!apiKey) {
      console.log(`❌ No API key found`);
      return res.status(500).json({ 
        error: 'OpenRouter API key is missing from environment variables',
        availableKeys: availableKeys,
        suggestion: 'Add OPENROUTER_KEY to Vercel environment variables'
      });
    }

    console.log(`🚀 Making request to OpenRouter API...`);

    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "HTTP-Referer": "https://gettutorly.com",
        "X-Title": "Tutorly PDF Summarizer",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "mistralai/mistral-7b-instruct",
        messages: [
          {
            role: "system",
            content: "You are a helpful assistant that creates concise, well-structured summaries of documents. Focus on the main points and key information."
          },
          {
            role: "user",
            content: `Please provide a clear and concise summary of the following text:\n\n${text.slice(0, 15000)}`
          }
        ],
        max_tokens: 1000,
        temperature: 0.3
      })
    });

    console.log(`📡 OpenRouter response status: ${response.status}`);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error("❌ OpenRouter API error:", errorData);
      
      return res.status(response.status).json({ 
        error: errorData.error?.message || `OpenRouter API error: ${response.status}`,
        details: errorData
      });
    }

    const data = await response.json();
    const summary = data.choices?.[0]?.message?.content;
    
    if (!summary) {
      console.error("❌ No summary in response:", data);
      return res.status(500).json({ 
        error: "No summary generated by the AI model"
      });
    }

    console.log(`✅ Summary generated successfully`);
    
    return res.status(200).json({ 
      summary: summary.trim(),
      metadata: {
        inputLength: text.length,
        outputLength: summary.length,
        model: "mistralai/mistral-7b-instruct"
      }
    });

  } catch (error) {
    console.error("💥 Server error:", error);
    
    return res.status(500).json({ 
      error: "Internal server error occurred while processing your request",
      message: error.message
    });
  }
}
