
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Helper to fetch latest Clerk JWT (handles both in-component and out-of-component scenarios)
async function fetchClerkToken() {
  // Prefer the Clerk global if available (works outside React component trees)
  if (typeof window !== 'undefined' && (window as any).Clerk?.session?.getToken) {
    // Always get the token using the "supabase" template
    return await (window as any).Clerk.session.getToken({ template: 'supabase' });
  }

  // If possible, try to use the Clerk getToken from the npm package (only available in React context)
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { getToken } = require('@clerk/clerk-react');
    return await getToken({ template: 'supabase' });
  } catch {
    return undefined;
  }
}

const SUPABASE_URL = "https://dllyfsbuxrjyiatfcegk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRsbHlmc2J1eHJqeWlhdGZjZWdrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc0NDUxNzAsImV4cCI6MjA2MzAyMTE3MH0.1jfGciFNtGgfw7bNZhuraoA_83whPx6Ojl0J5iHfJz0";

// Custom fetch: inject Authorization: Bearer <Clerk JWT> if user is authenticated
async function customFetch(input: RequestInfo, init?: RequestInit) {
  let token = await fetchClerkToken();
  
  const headers: HeadersInit = new Headers(init?.headers || {});
  if (token) {
    headers.set('Authorization', `Bearer ${token}`);
  }
  // Use the same url/input as Supabase would
  return fetch(input, { ...init, headers });
}

// Export the supabase client with custom fetcher
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  global: {
    fetch: customFetch,
  }
});
