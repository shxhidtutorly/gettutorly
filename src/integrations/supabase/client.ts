
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Helper to fetch latest Clerk JWT (handles both in-component and out-of-component scenarios)
async function fetchClerkToken() {
  // Prefer the Clerk global if available (works outside React component trees)
  if (typeof window !== 'undefined' && (window as any).Clerk?.session?.getToken) {
    try {
      // Always get the token using the "supabase" template
      const token = await (window as any).Clerk.session.getToken({ template: 'supabase' });
      console.log('üîë Retrieved Clerk JWT for Supabase:', token ? 'Success' : 'Failed');
      return token;
    } catch (error) {
      console.error('‚ùå Error getting Clerk token from global:', error);
      return undefined;
    }
  }

  // If possible, try to use the Clerk getToken from the npm package (only available in React context)
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { getToken } = require('@clerk/clerk-react');
    const token = await getToken({ template: 'supabase' });
    console.log('üîë Retrieved Clerk JWT via npm package:', token ? 'Success' : 'Failed');
    return token;
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not get Clerk token via npm package:', error);
    return undefined;
  }
}

const SUPABASE_URL = "https://dllyfsbuxrjyiatfcegk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRsbHlmc2J1eHJqeWlhdGZjZWdrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc0NDUxNzAsImV4cCI6MjA2MzAyMTE3MH0.1jfGciFNtGgfw7bNZhuraoA_83whPx6Ojl0J5iHfJz0";

// Custom fetch: inject Authorization: Bearer <Clerk JWT> if user is authenticated
async function customFetch(input: RequestInfo, init?: RequestInit) {
  const token = await fetchClerkToken();
  
  const headers: HeadersInit = new Headers(init?.headers || {});
  
  // Always set the apikey header for Supabase
  headers.set('apikey', SUPABASE_PUBLISHABLE_KEY);
  
  // Add Authorization header if we have a token
  if (token) {
    headers.set('Authorization', `Bearer ${token}`);
    console.log('üöÄ Making authenticated Supabase request with Clerk JWT');
  } else {
    console.log('üì° Making unauthenticated Supabase request');
  }
  
  // Log the request for debugging
  const url = typeof input === 'string' ? input : input.url;
  console.log('üì§ Supabase API call:', url, {
    method: init?.method || 'GET',
    hasAuth: !!token,
    headers: Object.fromEntries(headers.entries())
  });
  
  try {
    const response = await fetch(input, { ...init, headers });
    
    if (!response.ok) {
      console.error('‚ùå Supabase API error:', {
        status: response.status,
        statusText: response.statusText,
        url,
        hasAuth: !!token
      });
      
      // Try to log the error body
      try {
        const errorBody = await response.clone().text();
        console.error('‚ùå Error body:', errorBody);
      } catch (e) {
        console.error('‚ùå Could not read error body');
      }
    } else {
      console.log('‚úÖ Supabase API success:', url);
    }
    
    return response;
  } catch (error) {
    console.error('üí• Network error in Supabase request:', error);
    throw error;
  }
}

// Export the supabase client with custom fetcher
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  global: {
    fetch: customFetch,
  },
  auth: {
    persistSession: false, // We're using Clerk for session management
    autoRefreshToken: false, // Clerk handles token refresh
  }
});
